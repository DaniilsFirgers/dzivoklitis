version: '3.8'

services:
  # dzivoklitis-pooler:
  #   container_name: dzivoklitis-pooler
  #   build: 
  #     context: .
  #     dockerfile: Dockerfile.scraper
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #   volumes:
  #     - ./configs/config.toml:/app/config.toml 
  #     - ./configs/settings.json:/app/settings.json
  #     - ./logs:/var/log/app
  #     - ./migrations:/app/scraper/database/alembic/versions

  #   command: >
  #     sh -c "cd /app/scraper && python3.10 -u main.py"
  #   # command: >
  #   #   sh -c "cd /app/scraper/database && 
  #   #   alembic stamp head && alembic revision --autogenerate -m 'Generated migration' && alembic upgrade head; 
  #   #   cd /app/scraper && python3.10 -u main.py"

  #   networks:
  #     - dzivoklitis

  postgres:
    image: postgis/postgis:13-3.3 
    container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - dzivoklitis
    
  dzivoklitis-nginx:
    image: nginx:latest
    container_name: dzivoklitis-nginx
    volumes:
      - ./configs/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    depends_on:
      - dzivoklitis-backend
    networks:
      - dzivoklitis

  dzivoklitis-web:
    container_name: dzivoklitis-web
    build:
      context: .
      dockerfile: Dockerfile.web.dev
    volumes:
      - ./web-app:/web-app
      - /web-app/node_modules 
    networks:
      - dzivoklitis
  
  dzivoklitis-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: dzivoklitis-backend
    volumes:
      - ./backend:/backend
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dzivoklitis

  dzivoklitis-ngrok-proxy:
    image: ngrok/ngrok:latest
    container_name: dzivoklitis-ngrok-proxy
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}  # Make sure to replace this with your ngrok auth token
    command:
      - "http"
      - "http://dzivoklitis-nginx:80"  # Forward traffic to your dzivoklitis-nginx service on port 80
      - "--domain=${NGROK_DOMAIN}"  # This specifies your custom ngrok domain
    ports:
      - "4040:4040"  # Exposes ngrok's web dashboard on port 4040 (for monitoring)
    depends_on:
      - dzivoklitis-nginx
    networks:
      - dzivoklitis
    
networks:
  dzivoklitis:
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data 