version: '3.8'

services:
  flats-pooler:
    container_name: flats-pooler
    build: 
      context: .
      dockerfile: Dockerfile.scraper
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      TELEGRAM_TOKEN : ${TELEGRAM_TOKEN}
      ADMIN_TELEGRAM_ID : ${ADMIN_TELEGRAM_ID}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./configs/config.toml:/app/config.toml 
      - ./configs/settings.json:/app/settings.json
      - ./logs:/var/log/app

    command: python3.10 -u /app/scraper/main.py
    networks:
      - flats-analyzer
  
  flats-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: flats-backend
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - flats-analyzer

  postgres:
    image: postgis/postgis:13-3.3 
    container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - flats-analyzer
    
  flats-nginx:
    image: nginx:latest
    container_name: flats-nginx-proxy
    volumes:
      - ./configs/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    depends_on:
      - flats-backend
    networks:
      - flats-analyzer

  ngrok:
    image: wernight/ngrok
    container_name: ngrok
    environment:
      NGROK_PROTOCOL: http
      NGROK_REGION: eu
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    command: ngrok http --domain=${NGROK_DOMAIN} flats-nginx:80
    depends_on:
      - flats-nginx
    networks:
      - flats-analyzer
    
networks:
  flats-analyzer:
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data 